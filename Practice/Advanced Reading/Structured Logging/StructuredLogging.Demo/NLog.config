<?xml version="1.0" encoding="utf-8" ?>
<!-- 
=================================================================
NLOG CONFIGURATION FOR STRUCTURED LOGGING
=================================================================
This configuration demonstrates how to set up NLog for structured logging
NLog provides flexible configuration through XML with powerful targeting options

Key concepts demonstrated:
1. Multiple targets with different output formats
2. Structured logging with JSON output
3. Console and file logging with templates
4. Context enrichment and property capturing
5. Different log levels for different scenarios
=================================================================
-->
<nlog xmlns="http://www.nlog-project.org/schemas/NLog.xsd"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      autoReload="true"
      internalLogLevel="Info"
      internalLogFile="logs/internal-nlog.txt">

  <!-- Enable asp.net core layout renderers -->
  <extensions>
    <add assembly="NLog.Web.AspNetCore"/>
  </extensions>

  <!-- =================================================================
       TARGET DEFINITIONS - WHERE LOGS ARE WRITTEN
       ================================================================= -->
  <targets>
    
    <!-- Console target with colored output for development -->
    <!-- This target shows structured data in a readable console format -->
    <target xsi:type="Console" 
            name="console"
            layout="${longdate} ${level:uppercase=true:padding=-5} [${logger:shortName=true}] ${message} ${all-event-properties} ${exception:format=tostring}" />

    <!-- File target with detailed structured information -->
    <!-- Perfect for production environments where detailed logging is needed -->
    <target xsi:type="File" 
            name="fileTarget"
            fileName="logs/nlog-${shortdate}.log"
            layout="${longdate} ${level:uppercase=true:padding=-5} [${logger:shortName=true}] [${aspnet-request-method}] [${aspnet-request-url}] [${aspnet-mvc-controller}] [${aspnet-mvc-action}] ${message} ${all-event-properties} ${exception:format=tostring}"
            archiveFileName="logs/archive/nlog-{#}.log"
            archiveEvery="Day"
            archiveNumbering="Date"
            maxArchiveFiles="30" />

    <!-- JSON file target for log aggregation and analysis -->
    <!-- This format is perfect for tools like ELK stack, Splunk, or other log analyzers -->
    <target xsi:type="File" 
            name="jsonFile"
            fileName="logs/nlog-json-${shortdate}.log"
            archiveFileName="logs/archive/nlog-json-{#}.log"
            archiveEvery="Day"
            archiveNumbering="Date"
            maxArchiveFiles="30">
      <layout xsi:type="JsonLayout" includeAllProperties="true" excludeEmptyProperties="false">
        <!-- Define the structure of our JSON log entries -->
        <attribute name="timestamp" layout="${longdate}" />
        <attribute name="level" layout="${level:uppercase=true}" />
        <attribute name="logger" layout="${logger}" />
        <attribute name="message" layout="${message}" />
        <attribute name="exception" layout="${exception:format=tostring}" />
        
        <!-- ASP.NET Core specific context -->
        <attribute name="requestMethod" layout="${aspnet-request-method}" />
        <attribute name="requestUrl" layout="${aspnet-request-url}" />
        <attribute name="requestId" layout="${aspnet-request-id}" />
        <attribute name="connectionId" layout="${aspnet-request-connectionid}" />
        <attribute name="userAgent" layout="${aspnet-request-useragent}" />
        <attribute name="clientIP" layout="${aspnet-request-ip}" />
        
        <!-- MVC specific context -->
        <attribute name="controller" layout="${aspnet-mvc-controller}" />
        <attribute name="action" layout="${aspnet-mvc-action}" />
        
        <!-- Machine and process context -->
        <attribute name="machineName" layout="${machinename}" />
        <attribute name="processId" layout="${processid}" />
        <attribute name="threadId" layout="${threadid}" />
        
        <!-- Custom properties from structured logging -->
        <attribute name="properties" layout="${all-event-properties}" encode="false" />
      </layout>
    </target>

    <!-- Error-specific file target for critical issues -->
    <!-- Separate error logs make it easier to monitor and alert on critical issues -->
    <target xsi:type="File" 
            name="errorFile"
            fileName="logs/nlog-errors-${shortdate}.log"
            layout="${longdate} ${level:uppercase=true:padding=-5} [${logger:shortName=true}] ${message} ${all-event-properties} ${exception:format=tostring:maxInnerExceptionLevel=10}"
            archiveFileName="logs/archive/nlog-errors-{#}.log"
            archiveEvery="Day"
            archiveNumbering="Date"
            maxArchiveFiles="90" />

    <!-- Performance monitoring target -->
    <!-- Dedicated target for performance-related logs to analyze application bottlenecks -->
    <target xsi:type="File" 
            name="performanceFile"
            fileName="logs/nlog-performance-${shortdate}.log"
            layout="${longdate} [${aspnet-mvc-controller}] [${aspnet-mvc-action}] ${message} ${all-event-properties}"
            archiveFileName="logs/archive/nlog-performance-{#}.log"
            archiveEvery="Day"
            archiveNumbering="Date"
            maxArchiveFiles="7" />

  </targets>

  <!-- =================================================================
       LOGGING RULES - WHICH LOGS GO WHERE
       ================================================================= -->
  <rules>
    
    <!-- Skip Microsoft framework logs in development to reduce noise -->
    <!-- These logs are typically not useful during development but may be needed in production -->
    <logger name="Microsoft.*" maxlevel="Info" final="true" />
    
    <!-- Performance logs go to dedicated performance file -->
    <!-- Any log with the logger name containing "Performance" gets special treatment -->
    <logger name="*Performance*" minlevel="Info" writeTo="performanceFile" />
    
    <!-- Error and critical logs go to error-specific file -->
    <!-- This makes it easy to monitor and alert on critical application issues -->
    <logger name="*" minlevel="Error" writeTo="errorFile" />
    
    <!-- All application logs go to console (development) -->
    <!-- Console output is great for development but should be limited in production -->
    <logger name="*" minlevel="Debug" writeTo="console" />
    
    <!-- All logs go to main file with detailed information -->
    <!-- This is your comprehensive log file with all application activity -->
    <logger name="*" minlevel="Trace" writeTo="fileTarget" />
    
    <!-- All logs also go to JSON file for structured analysis -->
    <!-- This enables powerful log analysis with external tools -->
    <logger name="*" minlevel="Info" writeTo="jsonFile" />
    
  </rules>
  
</nlog>
