@model Implemented_MVC.DTOs.TodoItemDto
@{
    ViewData["Title"] = "Todo Details";
    string statusClass = Model.IsCompleted ? "bg-success" : (Model.IsOverdue ? "bg-danger" : "bg-primary");
    string badgeClass = "bg-light text-dark";
    string statusText = Model.IsCompleted ? "Completed" : (Model.IsOverdue ? "Overdue" : "Pending");
    string statusIcon = Model.IsCompleted ? "fas fa-check-circle" : (Model.IsOverdue ? "fas fa-exclamation-triangle" : "fas fa-clock");
}

<div class="row justify-content-center">
    <div class="col-md-8">
        <div class="card shadow">
            <div class="card-header @statusClass text-white">
                <div class="d-flex justify-content-between align-items-center">
                    <h3 class="card-title mb-0">
                        <i class="fas fa-eye me-2"></i>Todo Details
                    </h3>
                    <span class="badge @badgeClass">
                        <i class="@statusIcon me-1"></i>@statusText
                    </span>
                </div>
            </div>
            <div class="card-body p-4">
                <div class="mb-4">
                    <label class="form-label fw-bold text-muted">TITLE</label>
                    <h4 class="@(Model.IsCompleted ? "text-decoration-line-through text-muted" : "text-dark")">@Model.Title</h4>
                </div>
                
                @if (!string.IsNullOrEmpty(Model.Description))
                {
                    <div class="mb-4">
                        <label class="form-label fw-bold text-muted">DESCRIPTION</label>
                        <div class="@(Model.IsCompleted ? "text-muted" : "text-dark")">
                            @Html.Raw(Model.Description.Replace("\n", "<br>"))
                        </div>
                    </div>
                }
                
                <div class="row mb-4">
                    <div class="col-md-6">
                        <label class="form-label fw-bold text-muted">CREATED</label>
                        <p class="mb-0">
                            <i class="fas fa-calendar-plus text-info me-2"></i>
                            @Model.CreatedAt.ToString("MMMM dd, yyyy")
                            <br>
                            <small class="text-muted">@Model.CreatedAt.ToString("h:mm tt")</small>
                        </p>
                    </div>
                    @if (Model.DueDate.HasValue)
                    {
                        <div class="col-md-6">
                            <label class="form-label fw-bold text-muted">DUE DATE</label>
                            <p class="mb-0 @(Model.DueDate.Value < DateTime.Now && !Model.IsCompleted ? "text-danger" : "")">
                                <i class="fas fa-calendar-times @(Model.DueDate.Value < DateTime.Now && !Model.IsCompleted ? "text-danger" : "text-warning") me-2"></i>
                                @Model.DueDate.Value.ToString("MMMM dd, yyyy")
                                <br>
                                <small class="@(Model.DueDate.Value < DateTime.Now && !Model.IsCompleted ? "text-danger" : "text-muted")">@Model.DueDate.Value.ToString("h:mm tt")</small>
                                @if (Model.DueDate.Value < DateTime.Now && !Model.IsCompleted)
                                {
                                    <br><small class="text-danger fw-bold">⚠️ Overdue</small>
                                }
                            </p>
                        </div>
                    }
                </div>
                
                @if (Model.UpdatedAt.HasValue)
                {
                    <div class="mb-4">
                        <label class="form-label fw-bold text-muted">LAST UPDATED</label>
                        <p class="mb-0">
                            <i class="fas fa-edit text-secondary me-2"></i>
                            @Model.UpdatedAt.Value.ToString("MMMM dd, yyyy h:mm tt")
                        </p>
                    </div>
                }
                
                @if (Model.IsCompleted && Model.CompletedAt.HasValue)
                {
                    <div class="mb-4">
                        <label class="form-label fw-bold text-muted">COMPLETED</label>
                        <p class="mb-0 text-success">
                            <i class="fas fa-check-circle text-success me-2"></i>
                            @Model.CompletedAt.Value.ToString("MMMM dd, yyyy h:mm tt")
                        </p>
                    </div>
                }
                
                @if (User.IsInRole("Admin") && !string.IsNullOrEmpty(Model.UserEmail))
                {
                    <div class="mb-4">
                        <label class="form-label fw-bold text-muted">OWNER</label>
                        <p class="mb-0">
                            <i class="fas fa-user text-primary me-2"></i>
                            @Model.UserEmail
                            @if (!string.IsNullOrEmpty(Model.UserName))
                            {
                                <small class="text-muted">(@Model.UserName)</small>
                            }
                        </p>
                    </div>
                }
            </div>
            <div class="card-footer bg-light">
                <div class="d-flex gap-2">
                    <a asp-action="Edit" asp-route-id="@Model.Id" class="btn btn-warning">
                        <i class="fas fa-edit me-2"></i>Edit
                    </a>
                    <a asp-action="Delete" asp-route-id="@Model.Id" class="btn btn-danger">
                        <i class="fas fa-trash me-2"></i>Delete
                    </a>
                    <div class="ms-auto">
                        <a asp-action="Index" class="btn btn-outline-secondary">
                            <i class="fas fa-arrow-left me-2"></i>Back to List
                        </a>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
